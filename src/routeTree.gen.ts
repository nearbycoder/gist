/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as GistsPublicRouteImport } from './routes/gists/public'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as DashboardSettingsRouteImport } from './routes/_dashboard.settings'
import { Route as DashboardGistsIndexRouteImport } from './routes/_dashboard/gists/index'
import { Route as GistsIdShareRouteImport } from './routes/gists/$id.share'
import { Route as GistsIdEmbedRouteImport } from './routes/gists/$id.embed'
import { Route as DashboardGistsNewRouteImport } from './routes/_dashboard/gists/new'
import { Route as DashboardAdminUsersRouteImport } from './routes/_dashboard.admin.users'
import { Route as DashboardAdminGistsRouteImport } from './routes/_dashboard.admin.gists'
import { Route as DashboardGistsIdIndexRouteImport } from './routes/_dashboard/gists/$id/index'
import { Route as DashboardGistsIdEditRouteImport } from './routes/_dashboard/gists/$id/edit'
import { ServerRoute as ApiTestServerRouteImport } from './routes/api/test'
import { ServerRoute as ApiCheckServerRouteImport } from './routes/api/check'
import { ServerRoute as ApiOgIdServerRouteImport } from './routes/api/og/$id'
import { ServerRoute as ApiGistsIdServerRouteImport } from './routes/api/gists/$id'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const GistsPublicRoute = GistsPublicRouteImport.update({
  id: '/gists/public',
  path: '/gists/public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardGistsIndexRoute = DashboardGistsIndexRouteImport.update({
  id: '/gists/',
  path: '/gists/',
  getParentRoute: () => DashboardRoute,
} as any)
const GistsIdShareRoute = GistsIdShareRouteImport.update({
  id: '/gists/$id/share',
  path: '/gists/$id/share',
  getParentRoute: () => rootRouteImport,
} as any)
const GistsIdEmbedRoute = GistsIdEmbedRouteImport.update({
  id: '/gists/$id/embed',
  path: '/gists/$id/embed',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardGistsNewRoute = DashboardGistsNewRouteImport.update({
  id: '/gists/new',
  path: '/gists/new',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminUsersRoute = DashboardAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminGistsRoute = DashboardAdminGistsRouteImport.update({
  id: '/admin/gists',
  path: '/admin/gists',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardGistsIdIndexRoute = DashboardGistsIdIndexRouteImport.update({
  id: '/gists/$id/',
  path: '/gists/$id/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardGistsIdEditRoute = DashboardGistsIdEditRouteImport.update({
  id: '/gists/$id/edit',
  path: '/gists/$id/edit',
  getParentRoute: () => DashboardRoute,
} as any)
const ApiTestServerRoute = ApiTestServerRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCheckServerRoute = ApiCheckServerRouteImport.update({
  id: '/api/check',
  path: '/api/check',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiOgIdServerRoute = ApiOgIdServerRouteImport.update({
  id: '/api/og/$id',
  path: '/api/og/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiGistsIdServerRoute = ApiGistsIdServerRouteImport.update({
  id: '/api/gists/$id',
  path: '/api/gists/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/settings': typeof DashboardSettingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/gists/public': typeof GistsPublicRoute
  '/': typeof DashboardIndexRoute
  '/admin/gists': typeof DashboardAdminGistsRoute
  '/admin/users': typeof DashboardAdminUsersRoute
  '/gists/new': typeof DashboardGistsNewRoute
  '/gists/$id/embed': typeof GistsIdEmbedRoute
  '/gists/$id/share': typeof GistsIdShareRoute
  '/gists': typeof DashboardGistsIndexRoute
  '/gists/$id/edit': typeof DashboardGistsIdEditRoute
  '/gists/$id': typeof DashboardGistsIdIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/settings': typeof DashboardSettingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/gists/public': typeof GistsPublicRoute
  '/': typeof DashboardIndexRoute
  '/admin/gists': typeof DashboardAdminGistsRoute
  '/admin/users': typeof DashboardAdminUsersRoute
  '/gists/new': typeof DashboardGistsNewRoute
  '/gists/$id/embed': typeof GistsIdEmbedRoute
  '/gists/$id/share': typeof GistsIdShareRoute
  '/gists': typeof DashboardGistsIndexRoute
  '/gists/$id/edit': typeof DashboardGistsIdEditRoute
  '/gists/$id': typeof DashboardGistsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_dashboard/settings': typeof DashboardSettingsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/gists/public': typeof GistsPublicRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/admin/gists': typeof DashboardAdminGistsRoute
  '/_dashboard/admin/users': typeof DashboardAdminUsersRoute
  '/_dashboard/gists/new': typeof DashboardGistsNewRoute
  '/gists/$id/embed': typeof GistsIdEmbedRoute
  '/gists/$id/share': typeof GistsIdShareRoute
  '/_dashboard/gists/': typeof DashboardGistsIndexRoute
  '/_dashboard/gists/$id/edit': typeof DashboardGistsIdEditRoute
  '/_dashboard/gists/$id/': typeof DashboardGistsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/settings'
    | '/auth/login'
    | '/auth/register'
    | '/gists/public'
    | '/'
    | '/admin/gists'
    | '/admin/users'
    | '/gists/new'
    | '/gists/$id/embed'
    | '/gists/$id/share'
    | '/gists'
    | '/gists/$id/edit'
    | '/gists/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/settings'
    | '/auth/login'
    | '/auth/register'
    | '/gists/public'
    | '/'
    | '/admin/gists'
    | '/admin/users'
    | '/gists/new'
    | '/gists/$id/embed'
    | '/gists/$id/share'
    | '/gists'
    | '/gists/$id/edit'
    | '/gists/$id'
  id:
    | '__root__'
    | '/_dashboard'
    | '/auth'
    | '/_dashboard/settings'
    | '/auth/login'
    | '/auth/register'
    | '/gists/public'
    | '/_dashboard/'
    | '/_dashboard/admin/gists'
    | '/_dashboard/admin/users'
    | '/_dashboard/gists/new'
    | '/gists/$id/embed'
    | '/gists/$id/share'
    | '/_dashboard/gists/'
    | '/_dashboard/gists/$id/edit'
    | '/_dashboard/gists/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  GistsPublicRoute: typeof GistsPublicRoute
  GistsIdEmbedRoute: typeof GistsIdEmbedRoute
  GistsIdShareRoute: typeof GistsIdShareRoute
}
export interface FileServerRoutesByFullPath {
  '/api/check': typeof ApiCheckServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/gists/$id': typeof ApiGistsIdServerRoute
  '/api/og/$id': typeof ApiOgIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/check': typeof ApiCheckServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/gists/$id': typeof ApiGistsIdServerRoute
  '/api/og/$id': typeof ApiOgIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/check': typeof ApiCheckServerRoute
  '/api/test': typeof ApiTestServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/gists/$id': typeof ApiGistsIdServerRoute
  '/api/og/$id': typeof ApiOgIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/check'
    | '/api/test'
    | '/api/auth/$'
    | '/api/gists/$id'
    | '/api/og/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/check'
    | '/api/test'
    | '/api/auth/$'
    | '/api/gists/$id'
    | '/api/og/$id'
  id:
    | '__root__'
    | '/api/check'
    | '/api/test'
    | '/api/auth/$'
    | '/api/gists/$id'
    | '/api/og/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCheckServerRoute: typeof ApiCheckServerRoute
  ApiTestServerRoute: typeof ApiTestServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiGistsIdServerRoute: typeof ApiGistsIdServerRoute
  ApiOgIdServerRoute: typeof ApiOgIdServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/gists/public': {
      id: '/gists/public'
      path: '/gists/public'
      fullPath: '/gists/public'
      preLoaderRoute: typeof GistsPublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_dashboard/settings': {
      id: '/_dashboard/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/gists/': {
      id: '/_dashboard/gists/'
      path: '/gists'
      fullPath: '/gists'
      preLoaderRoute: typeof DashboardGistsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/gists/$id/share': {
      id: '/gists/$id/share'
      path: '/gists/$id/share'
      fullPath: '/gists/$id/share'
      preLoaderRoute: typeof GistsIdShareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gists/$id/embed': {
      id: '/gists/$id/embed'
      path: '/gists/$id/embed'
      fullPath: '/gists/$id/embed'
      preLoaderRoute: typeof GistsIdEmbedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/gists/new': {
      id: '/_dashboard/gists/new'
      path: '/gists/new'
      fullPath: '/gists/new'
      preLoaderRoute: typeof DashboardGistsNewRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/admin/users': {
      id: '/_dashboard/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof DashboardAdminUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/admin/gists': {
      id: '/_dashboard/admin/gists'
      path: '/admin/gists'
      fullPath: '/admin/gists'
      preLoaderRoute: typeof DashboardAdminGistsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/gists/$id/': {
      id: '/_dashboard/gists/$id/'
      path: '/gists/$id'
      fullPath: '/gists/$id'
      preLoaderRoute: typeof DashboardGistsIdIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/gists/$id/edit': {
      id: '/_dashboard/gists/$id/edit'
      path: '/gists/$id/edit'
      fullPath: '/gists/$id/edit'
      preLoaderRoute: typeof DashboardGistsIdEditRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/test': {
      id: '/api/test'
      path: '/api/test'
      fullPath: '/api/test'
      preLoaderRoute: typeof ApiTestServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/check': {
      id: '/api/check'
      path: '/api/check'
      fullPath: '/api/check'
      preLoaderRoute: typeof ApiCheckServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/og/$id': {
      id: '/api/og/$id'
      path: '/api/og/$id'
      fullPath: '/api/og/$id'
      preLoaderRoute: typeof ApiOgIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/gists/$id': {
      id: '/api/gists/$id'
      path: '/api/gists/$id'
      fullPath: '/api/gists/$id'
      preLoaderRoute: typeof ApiGistsIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardAdminGistsRoute: typeof DashboardAdminGistsRoute
  DashboardAdminUsersRoute: typeof DashboardAdminUsersRoute
  DashboardGistsNewRoute: typeof DashboardGistsNewRoute
  DashboardGistsIndexRoute: typeof DashboardGistsIndexRoute
  DashboardGistsIdEditRoute: typeof DashboardGistsIdEditRoute
  DashboardGistsIdIndexRoute: typeof DashboardGistsIdIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardAdminGistsRoute: DashboardAdminGistsRoute,
  DashboardAdminUsersRoute: DashboardAdminUsersRoute,
  DashboardGistsNewRoute: DashboardGistsNewRoute,
  DashboardGistsIndexRoute: DashboardGistsIndexRoute,
  DashboardGistsIdEditRoute: DashboardGistsIdEditRoute,
  DashboardGistsIdIndexRoute: DashboardGistsIdIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  GistsPublicRoute: GistsPublicRoute,
  GistsIdEmbedRoute: GistsIdEmbedRoute,
  GistsIdShareRoute: GistsIdShareRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCheckServerRoute: ApiCheckServerRoute,
  ApiTestServerRoute: ApiTestServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiGistsIdServerRoute: ApiGistsIdServerRoute,
  ApiOgIdServerRoute: ApiOgIdServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
